// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notification_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	// ConnectToServer connects to server with the ClientDetail message
	// this will in response receive stream of Chunk
	ConnectToServer(ctx context.Context, in *ClientDetail, opts ...grpc.CallOption) (Notification_ConnectToServerClient, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) ConnectToServer(ctx context.Context, in *ClientDetail, opts ...grpc.CallOption) (Notification_ConnectToServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notification_serviceDesc.Streams[0], "/notification_proto.Notification/ConnectToServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationConnectToServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notification_ConnectToServerClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type notificationConnectToServerClient struct {
	grpc.ClientStream
}

func (x *notificationConnectToServerClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	// ConnectToServer connects to server with the ClientDetail message
	// this will in response receive stream of Chunk
	ConnectToServer(*ClientDetail, Notification_ConnectToServerServer) error
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) ConnectToServer(*ClientDetail, Notification_ConnectToServerServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToServer not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&_Notification_serviceDesc, srv)
}

func _Notification_ConnectToServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientDetail)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServer).ConnectToServer(m, &notificationConnectToServerServer{stream})
}

type Notification_ConnectToServerServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type notificationConnectToServerServer struct {
	grpc.ServerStream
}

func (x *notificationConnectToServerServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification_proto.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToServer",
			Handler:       _Notification_ConnectToServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification_proto/notification.proto",
}
